// <auto-generated />
using System;
using DataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(VitalityMasteryContext))]
    partial class VitalityMasteryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Models.Achievement", b =>
                {
                    b.Property<int>("AchievementsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("achievements_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AchievementsId"));

                    b.Property<string>("AchievementsText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("achievements_text");

                    b.Property<int>("AchievementsType")
                        .HasColumnType("int")
                        .HasColumnName("achievements_type");

                    b.HasKey("AchievementsId")
                        .HasName("PK__Achievem__833913348EB6F7EC");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("DataAccess.Models.Comment", b =>
                {
                    b.Property<int>("CommentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comments_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentsId"));

                    b.Property<DateTime>("CommentsDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("comments_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("CommentsText")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasColumnName("comments_text");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<int>("ItemType")
                        .HasColumnType("int")
                        .HasColumnName("item_type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CommentsId")
                        .HasName("PK__Comments__E059CA99DC324E18");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "CommentsId" }, "UQ__Comments__E059CA982AFBB896")
                        .IsUnique();

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DataAccess.Models.Dialog", b =>
                {
                    b.Property<int>("DialogsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("dialogs_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DialogsId"));

                    b.Property<DateTime>("EndTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TextDialogs")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("text_dialogs");

                    b.Property<DateTime>("TimeCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("time_create")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("DialogsId")
                        .HasName("PK__Dialogs__39AA56DBD0F42E0C");

                    b.ToTable("Dialogs");
                });

            modelBuilder.Entity("DataAccess.Models.Friend", b =>
                {
                    b.Property<int>("FriendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("friend_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FriendId"));

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId1")
                        .HasColumnType("int")
                        .HasColumnName("user_id_1");

                    b.Property<int>("UserId2")
                        .HasColumnType("int")
                        .HasColumnName("user_id_2");

                    b.HasKey("FriendId")
                        .HasName("PK__Friend__3FA1E155FC17435C");

                    b.HasIndex(new[] { "FriendId" }, "UQ__Friend__3FA1E1544E786DC0")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId1", "UserId2" }, "UQ__Friend__7482DAF0E16D9C14")
                        .IsUnique();

                    b.ToTable("Friend", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Group", b =>
                {
                    b.Property<int>("GroupsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("groups_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupsId"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("GroupsName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("nvarchar(55)")
                        .HasColumnName("groups_name");

                    b.Property<int>("OwnerGroups")
                        .HasColumnType("int")
                        .HasColumnName("owner_groups");

                    b.Property<DateTime?>("UpdateGroups")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("update_groups")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("GroupsId")
                        .HasName("PK__Groups__54CA4F67F69A76BB");

                    b.HasIndex(new[] { "OwnerGroups" }, "UQ__Groups__FEBE0EE76EE8C9F0")
                        .IsUnique();

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DataAccess.Models.GroupMember", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int")
                        .HasColumnName("groups_id");

                    b.Property<DateTime>("JoinDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("GroupsId")
                        .HasName("PK__GroupMem__54CA4F6771C540AD");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("DataAccess.Models.MessageUser", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<DateTime>("DateMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("date_message")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DateUpMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("date_up_message")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("message_content");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("ReceiverID");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("SenderID");

                    b.HasKey("MessageId")
                        .HasName("PK__MessageU__C87C037C291336D8");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("MessageUsers");
                });

            modelBuilder.Entity("DataAccess.Models.Nutrition", b =>
                {
                    b.Property<int>("NutritionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("nutrition_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NutritionId"));

                    b.Property<DateTime>("DateNutrition")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_nutrition");

                    b.Property<string>("MeanDeacription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("mean_deacription");

                    b.Property<string>("MeanType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("mean_type");

                    b.Property<int>("Product")
                        .HasColumnType("int");

                    b.HasKey("NutritionId")
                        .HasName("PK__Nutritio__147CC3A2A62ED9EB");

                    b.HasIndex("Product");

                    b.ToTable("Nutrition", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.PhotoUser", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhotoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoId"));

                    b.Property<string>("PhotoLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UploadPhoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("upload_photo")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("PhotoId")
                        .HasName("PK__PhotoUse__21B7B582ECEDE671");

                    b.HasIndex("UserId");

                    b.ToTable("PhotoUsers");
                });

            modelBuilder.Entity("DataAccess.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<decimal>("Calories")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("CarbsPer")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("FatPer")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("NutritionalValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Product1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Product");

                    b.Property<decimal>("ProteinPer")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("VitaminsAndMinerals")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ProductId")
                        .HasName("PK__Products__B40CC6ED9C4445BF");

                    b.HasIndex(new[] { "Product1" }, "UQ__Products__A2A64E92A9A004B0")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DataAccess.Models.Publication", b =>
                {
                    b.Property<int>("PublicationsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("publications_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicationsId"));

                    b.Property<DateTime?>("PublicationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("publication_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PublicationText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("publication_text");

                    b.Property<string>("PublicationsImage")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("publications_image")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int>("UsersId")
                        .HasColumnType("int")
                        .HasColumnName("users_id");

                    b.HasKey("PublicationsId")
                        .HasName("PK__Publicat__CE2F37DC8509188E");

                    b.HasIndex("UsersId");

                    b.HasIndex(new[] { "PublicationsId" }, "UQ__Publicat__CE2F37DD2ABCC851")
                        .IsUnique();

                    b.ToTable("Publication", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Role1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("PK__Roles__3213E83F24C91117");

                    b.HasIndex(new[] { "Id" }, "UQ__Roles__3213E83EE86A8FB9")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DataAccess.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("schedule_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("day_of_week");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int")
                        .HasColumnName("trainer_id");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int")
                        .HasColumnName("training_id");

                    b.Property<string>("TrainingType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ScheduleId")
                        .HasName("PK__Schedule__C46A8A6F001C1753");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Trainer", b =>
                {
                    b.Property<int>("TrainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("trainer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainerId"));

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("last_name")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("middle_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("phone_number");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("TrainerId")
                        .HasName("PK__Trainer__65A4B6291F5BDAC1");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "TrainerId", "UserId" }, "UQ__Trainer__8E3F5558B9A95249")
                        .IsUnique();

                    b.ToTable("Trainer", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.TrainersSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("schedule_id");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time")
                        .HasColumnName("time");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int")
                        .HasColumnName("trainer_id");

                    b.Property<string>("TypeOfTraining")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type_of_training");

                    b.HasKey("Id")
                        .HasName("PK__Trainers__3213E83F928DF0C8");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainersSchedule", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CaloriesBurned")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("DurationMinutes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("TrainingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int")
                        .HasColumnName("training_id");

                    b.Property<string>("TrainingType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Training__3213E83F5D0AC0A2");

                    b.HasIndex(new[] { "TrainingId" }, "UQ__Training__2F28D08ED07AEC33")
                        .IsUnique();

                    b.ToTable("Training");
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("AboutMe")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("password");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("phone_number");

                    b.Property<int?>("RoleUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_user")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime?>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserImg")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_img");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("user_name");

                    b.HasKey("UserId")
                        .HasName("PK__Users__B9BE370FE477DE7B");

                    b.HasIndex(new[] { "UserId" }, "UQ__Users__B9BE370E5A3ABD8E")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAccess.Models.UserNutrition", b =>
                {
                    b.Property<int>("UserNutritionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_nutrition_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserNutritionId"));

                    b.Property<TimeOnly>("AppointmentTime")
                        .HasColumnType("time")
                        .HasColumnName("appointment_time");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("DateOfAdmission")
                        .HasColumnType("date")
                        .HasColumnName("date_of_admission");

                    b.Property<int>("NutritionId")
                        .HasColumnType("int")
                        .HasColumnName("nutrition_id");

                    b.Property<string>("NutritionType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("nutrition_type");

                    b.Property<string>("Report")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("report");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("UserNutritionId")
                        .HasName("PK__UserNutr__53483C7181425DBD");

                    b.HasIndex("NutritionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNutrition", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.UserToAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AchievementsId")
                        .HasColumnType("int")
                        .HasColumnName("achievements_id");

                    b.Property<DateTime>("GetDateAchievements")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("get_date_achievements")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__User_to___3213E83F7A3F286E");

                    b.HasIndex("AchievementsId");

                    b.HasIndex("UserId");

                    b.ToTable("User_to_achievements", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.UserToDialog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DialogId")
                        .HasColumnType("int")
                        .HasColumnName("dialog_id");

                    b.Property<DateTime>("TimeCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("time_create")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__User_to___3213E83FB22E8262");

                    b.HasIndex("DialogId");

                    b.HasIndex("UserId");

                    b.ToTable("User_to_dialogs", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.UserToRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__User_to___3213E83F58C53065");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Id" }, "UQ__User_to___3213E83E415D1963")
                        .IsUnique();

                    b.ToTable("User_to_rule", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.UserTraining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("day_of_week");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("duration");

                    b.Property<DateTime>("EndAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("end_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Notes")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notes")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<DateTime>("StartAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("start_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("TrainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("trainer_id")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int")
                        .HasColumnName("training_id");

                    b.Property<string>("TrainingStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("training_status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__UserTrai__3213E83F139E5454");

                    b.HasIndex("TrainerId");

                    b.HasIndex("TrainingId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTraining", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Comment", b =>
                {
                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Comments");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.Friend", b =>
                {
                    b.HasOne("DataAccess.Models.User", "UserId1Navigation")
                        .WithMany("Friends")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Friend_1");

                    b.Navigation("UserId1Navigation");
                });

            modelBuilder.Entity("DataAccess.Models.Group", b =>
                {
                    b.HasOne("DataAccess.Models.User", "OwnerGroupsNavigation")
                        .WithOne("Group")
                        .HasForeignKey("DataAccess.Models.Group", "OwnerGroups")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Groups_Owner");

                    b.Navigation("OwnerGroupsNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.GroupMember", b =>
                {
                    b.HasOne("DataAccess.Models.Group", "Groups")
                        .WithOne("GroupMember")
                        .HasForeignKey("DataAccess.Models.GroupMember", "GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_GroupMember_1");

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Fk_GroupMember_2");

                    b.Navigation("Groups");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.MessageUser", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Receiver")
                        .WithMany("MessageUserReceivers")
                        .HasForeignKey("ReceiverId")
                        .IsRequired()
                        .HasConstraintName("FK_Message_2");

                    b.HasOne("DataAccess.Models.User", "Sender")
                        .WithMany("MessageUserSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Message_1");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DataAccess.Models.Nutrition", b =>
                {
                    b.HasOne("DataAccess.Models.Product", "ProductNavigation")
                        .WithMany("Nutritions")
                        .HasForeignKey("Product")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Nutration");

                    b.Navigation("ProductNavigation");
                });

            modelBuilder.Entity("DataAccess.Models.PhotoUser", b =>
                {
                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("PhotoUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_PhotoUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.Publication", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Users")
                        .WithMany("Publications")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Publication");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataAccess.Models.Trainer", b =>
                {
                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("Trainers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Trainer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.TrainersSchedule", b =>
                {
                    b.HasOne("DataAccess.Models.Schedule", "Schedule")
                        .WithMany("TrainersSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TrainersSchedule_2");

                    b.HasOne("DataAccess.Models.Trainer", "Trainer")
                        .WithMany("TrainersSchedules")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TrainersSchedule_1");

                    b.Navigation("Schedule");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("DataAccess.Models.UserNutrition", b =>
                {
                    b.HasOne("DataAccess.Models.Nutrition", "Nutrition")
                        .WithMany("UserNutritions")
                        .HasForeignKey("NutritionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserNutration_2");

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("UserNutritions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserNutration_1");

                    b.Navigation("Nutrition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.UserToAchievement", b =>
                {
                    b.HasOne("DataAccess.Models.Achievement", "Achievements")
                        .WithMany("UserToAchievements")
                        .HasForeignKey("AchievementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserAchievements_2");

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("UserToAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserAchievements_1");

                    b.Navigation("Achievements");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.UserToDialog", b =>
                {
                    b.HasOne("DataAccess.Models.Dialog", "Dialog")
                        .WithMany("UserToDialogs")
                        .HasForeignKey("DialogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Dialogs");

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("UserToDialogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserDialogs");

                    b.Navigation("Dialog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.UserToRule", b =>
                {
                    b.HasOne("DataAccess.Models.Role", "Role")
                        .WithMany("UserToRules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_role_2");

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("UserToRules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_role");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.UserTraining", b =>
                {
                    b.HasOne("DataAccess.Models.Trainer", "Trainer")
                        .WithMany("UserTrainings")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_UserTraining_1");

                    b.HasOne("DataAccess.Models.Training", "Training")
                        .WithMany("UserTrainings")
                        .HasForeignKey("TrainingId")
                        .HasPrincipalKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserTraining_3");

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("UserTrainings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserTraining_2");

                    b.Navigation("Trainer");

                    b.Navigation("Training");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.Achievement", b =>
                {
                    b.Navigation("UserToAchievements");
                });

            modelBuilder.Entity("DataAccess.Models.Dialog", b =>
                {
                    b.Navigation("UserToDialogs");
                });

            modelBuilder.Entity("DataAccess.Models.Group", b =>
                {
                    b.Navigation("GroupMember");
                });

            modelBuilder.Entity("DataAccess.Models.Nutrition", b =>
                {
                    b.Navigation("UserNutritions");
                });

            modelBuilder.Entity("DataAccess.Models.Product", b =>
                {
                    b.Navigation("Nutritions");
                });

            modelBuilder.Entity("DataAccess.Models.Role", b =>
                {
                    b.Navigation("UserToRules");
                });

            modelBuilder.Entity("DataAccess.Models.Schedule", b =>
                {
                    b.Navigation("TrainersSchedules");
                });

            modelBuilder.Entity("DataAccess.Models.Trainer", b =>
                {
                    b.Navigation("TrainersSchedules");

                    b.Navigation("UserTrainings");
                });

            modelBuilder.Entity("DataAccess.Models.Training", b =>
                {
                    b.Navigation("UserTrainings");
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Friends");

                    b.Navigation("Group");

                    b.Navigation("GroupMembers");

                    b.Navigation("MessageUserReceivers");

                    b.Navigation("MessageUserSenders");

                    b.Navigation("PhotoUsers");

                    b.Navigation("Publications");

                    b.Navigation("Trainers");

                    b.Navigation("UserNutritions");

                    b.Navigation("UserToAchievements");

                    b.Navigation("UserToDialogs");

                    b.Navigation("UserToRules");

                    b.Navigation("UserTrainings");
                });
#pragma warning restore 612, 618
        }
    }
}
